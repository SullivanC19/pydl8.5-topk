name: Basic - Github CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  #   pull_request:
  #     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # checkout the code and copies it on the machine
      - uses: actions/checkout@v3

      # install gcc
      - uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      # Sets up python3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      # Installs and upgrades pip, installs other dependencies and installs the package from setup.py
      - name: installs dependencies and installs the package from setup.py
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine auditwheel
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi

      - name: Build a binary wheel and a source tarball
        run: |
          python3 setup.py sdist bdist_wheel
          auditwheel repair dist/*.whl
          python3 setup.py install

      - name: Run tests, compute coverage and generate xml report
        run: |
          coverage run --source=pydl85/supervised/classifiers/tests/ -m pytest -v
          coverage xml --data-file=.coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          name: codecov-umbrella
          verbose: true

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_PUSH_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true

      - name: Publish distribution ðŸ“¦ to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_PUSH_API_TOKEN }}
          skip_existing: true
          verbose: true