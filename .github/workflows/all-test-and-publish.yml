name: All - Publish Package on PyPI or Test PyPI

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - macos-12
        compiler:
          - gcc
          # you can specify the version after `-` like `llvm-13.0.0`.
        include:
          - os: "windows-2022"
            compiler: "msvc"
        python-version: [3.8, 3.9]
        architecture: [x86_64]

    steps:
      - uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ env.BUILD_TYPE }}-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true # instead of `true`, which chooses the default version, you can pass a specific version.
          # ...
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [macos-latest, windows-latest]
#        python-version: [3.8, 3.9]
#        architecture: [x86_64]
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Install GCC
#        uses: egor-tensin/setup-gcc@v1
#        with:
#          version: latest
#          platform: x64

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools wheel twine
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi

      - name: Build package and install it
        run: |
          python3 setup.py sdist bdist_wheel
          python3 -m pip install .

      - name: Run tests, compute coverage and generate xml report
        run: |
          coverage run --source=pydl85/supervised/classifiers/tests/ -m pytest -v
          coverage xml --data-file=.coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          name: codecov-umbrella
          verbose: true

      - name: Publish ðŸ“¦ on PyPI and/or on Test PyPI (if tag)
        env:
          TWINE_TEST_TOKEN: ${{ secrets.TEST_PYPI_PUSH_API_TOKEN }}
          TWINE_TOKEN: ${{ secrets.PYPI_PUSH_API_TOKEN }}
          PACKAGE_PATH: dist/*
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "Publishing on PyPI"
            twine upload --verbose --skip-existing --repository pypi $PACKAGE_PATH -u __token__ -p $TWINE_TOKEN
          fi
          echo "Publishing on Test PyPI"
          twine upload --verbose --skip-existing --repository testpypi $PACKAGE_PATH -u __token__ -p $TWINE_TEST_TOKEN
