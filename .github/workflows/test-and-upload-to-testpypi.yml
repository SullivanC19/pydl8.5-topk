# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # checkout the code and copies it on the machine
      - uses: actions/checkout@v3
      
      # install gcc
      - uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64
      
      # Sets up python3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
          
      # Installs and upgrades pip, installs other dependencies and installs the package from setup.py
      - name: "Installs and upgrades pip, installs other dependencies and installs the package from setup.py"
        run: |
          # Upgrade pip
          python3 -m pip install --upgrade pip
          # Install build deps
          # python3 -m pip install setuptools wheel twine
          python3 -m pip install wheel twine
          # If requirements.txt exists, install from it
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi
          # Install codecov
          pip install codecov
          # Install the package from setup.py
          python3 setup.py install
          pytest -v --cov=pydl85 pydl85/supervised/classifiers/tests/
          codecov
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          name: codecov-umbrella
          verbose: true

      # Tests with unittest
      # - name: Test with unittest
        # run: |
          # cd tests
          # python3 -m unittest discover
          # cd ..
      
      # - name: Install pypa/build
        # run: >-
          # python -m
          # pip install
          # build
          # --user
          
#       - name: Build a binary wheel and a source tarball
#         run: >-
#           python3 -m
#           build
#           --sdist
#           --wheel
#           --outdir dist/
#           .
        
      - name: Build a binary wheel and a source tarball
        run: python3 setup.py sdist #bdist_wheel
      
      - name: Build manylinux Python wheels
        uses: RalfG/python-wheels-manylinux-build@v0.4.2-manylinux2014_x86_64
        with:
          python-versions: 'cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39 cp310-cp310'
          build-requirements: 'cython numpy scikit-learn setuptools graphviz gurobipy cvxpy'
      
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true
      
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          verbose: true
          

      # Upload to TestPyPI
      # - name: Build and Upload to TestPyPI
        # run: |
          # python3 setup.py sdist bdist_wheel
          # python3 -m twine upload --verbose dist/*
        # env:
          # TWINE_USERNAME: __token__
          # TWINE_PASSWORD: ${{ secrets.TWINE_TEST_TOKEN }}
          # TWINE_REPOSITORY: testpypi

      # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
        # run: |
          # echo Add other actions to build,
          # echo test, and deploy your project.
