name: Linux - Publish Package on PyPI or Test PyPI

on:
  push:
    branches: [ master ]
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools wheel twine auditwheel
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

#      - name: Build and install the package
#        run: |
#          python setup.py sdist bdist_wheel
#          if [ "${{ runner.os }}" = "Linux" ]; then
#              auditwheel repair --plat manylinux_2_27_x86_64 dist/*.whl
#          fi
#          python3 setup.py install

#      - name: Build package
#        uses: docker://quay.io/pypa/manylinux2014_x86_64:latest
#        with:
##          args: bash -c "yum install -y openssl-devel bzip2-devel libffi-devel && curl -LO https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tgz && tar xzf Python-3.10.0.tgz && cd Python-3.10.0 && ./configure --enable-optimizations --with-ensurepip=install && make altinstall && cd .. && rm -rf Python-3.10.0* && python -m pip install -U setuptools wheel && if [ -f requirements.txt ]; then python -m pip install -r requirements.txt; fi && python setup.py sdist bdist_wheel && cp dist/* /github/workspace/"
#          args: bash -c "yum install -y python3-devel && curl https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py && python3 get-pip.py --user && if [ -f requirements.txt ]; then /github/home/.local/bin/pip install -r requirements.txt; fi && /github/home/.local/bin/pip install wheel && python setup.py sdist bdist_wheel && cp dist/* /github/workspace/"

      - name: Build package
        uses: docker://quay.io/pypa/manylinux2014_x86_64:latest
        with:
          args: bash -c "yum install -y python3-devel && python3 -m venv /venv && source /venv/bin/activate && curl https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py && python get-pip.py && if [ -f requirements.txt ]; then pip install -r requirements.txt; fi && pip install wheel && python setup.py sdist bdist_wheel && cp dist/* /github/workspace/"


      - name: Auditwheel repair
        uses: docker://quay.io/pypa/manylinux2014_x86_64:latest
        with:
          args: bash -c "yum install -y python3-devel && curl https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py && python3 get-pip.py --user && /github/home/.local/bin/pip install -U auditwheel && auditwheel repair /github/workspace/*.whl"


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          architecture: 'x64'


      - name: Install package and upload dependencies
        run: |
          python3 -m pip install --upgrade pip
          if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi
          python3 -m pip install .
          

      - name: Run tests, compute coverage and generate xml report
        run: |
          coverage run --source=pydl85/supervised/classifiers/tests/ -m pytest -v
          coverage xml --data-file=.coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          fail_ci_if_error: true
          name: codecov-umbrella
          verbose: true

      - name: Add source distribution to wheelhouse
        run: |
          ls wheelhouse/
          cp pydl8*.tar.gz wheelhouse/
          cp pydl8*.zip wheelhouse/
          ls wheelhouse/

      - name: Install twine
        run: |
          python -m pip install twine

      - name: Publish ðŸ“¦ on PyPI and/or on Test PyPI (if tag)
        env:
          TWINE_TEST_TOKEN: ${{ secrets.TEST_PYPI_PUSH_API_TOKEN }}
          TWINE_TOKEN: ${{ secrets.PYPI_PUSH_API_TOKEN }}
          PACKAGE_PATH: ${{ github.workspace }}/wheelhouse/*
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "Publishing on PyPI"
            twine upload --verbose --skip-existing --repository pypi $PACKAGE_PATH -u __token__ -p $TWINE_TOKEN
          fi
          echo "Publishing on Test PyPI"
          twine upload --verbose --skip-existing --repository testpypi $PACKAGE_PATH -u __token__ -p $TWINE_TEST_TOKEN
